length(V(g)[degree(g) > 1])
length(V(g)[degree(g) > 2])
length(V(g)[degree(g) > 3])
length(V(g)[degree(g) > 22])
length(V(g)[degree(g) > 21])
length(V(g)[degree(g) > 20])
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(tidygraph)
library(tidyverse)
library(ggplot2)
library(ggraph)
library(ggeasy)
nodes = as.data.frame(read.csv("data/nodes.csv"))
edges = as.data.frame(read.csv("data/edges.csv"))
layout = as.matrix(cbind(nodes$x, nodes$y))
g = graph_from_data_frame(edges, nodes, directed = F)
V(g)$group = as_factor(V(g)$group)
colors = c("orange", "lightgreen", "purple", "lightblue", "red")
ggraph(as_tbl_graph(g), layout = layout) +
geom_edge_link(aes(alpha = centrality_edge_betweenness()), show.legend = F) +
geom_node_point(aes(color = group, size = centrality_degree())) +
# geom_node_text(aes(label = str_trunc(name, 8, ellipsis = "..."))) +
ggtitle("9/11 Hijackers communication network") +
guides(size = "none", alpha = "none") +
scale_color_manual(values = colors, name = "Flight", labels = c("A.A. Flight 11", "A.A. Flight 77", "U.A. Flight 93", "U.A. Flight 175", "No flight")) +
theme_void()
deg = as_tbl_graph(g) %>%
activate(nodes) %>%
mutate(degree = centrality_degree()) %>%
arrange(desc(degree)) %>%
slice(1:10) %>%
select(name, degree) %>%
as_tibble()
deg
deg = as_tbl_graph(g) %>%
activate(nodes) %>%
mutate(degree = centrality_degree()) %>%
arrange(desc(degree)) %>%
slice(1:10) %>%
select(name, degree) %>%
as_tibble()
deg
ggraph(as_tbl_graph(g), layout = layout) +
geom_edge_link(aes(alpha = centrality_edge_betweenness()), show.legend = F) +
geom_node_point(aes(color = group, size = centrality_degree())) +
geom_node_text(aes(label = ifelse(name %in% deg$name, name, ""))) +
ggtitle("Top 10 highest-ranked nodes") +
guides(size = "none", alpha = "none") +
scale_color_manual(values = colors, name = "Flight", labels = c("A.A. Flight 11", "A.A. Flight 77", "U.A. Flight 93", "U.A. Flight 175", "No flight")) +
theme_void()
as_tbl_graph(g) %>%
activate(nodes) %>%
mutate(degree = centrality_degree(), closeness = centrality_closeness(), betweenness = centrality_betweenness()) %>%
select(name, degree, closeness, betweenness) %>%
arrange(desc(degree), desc(closeness), desc(betweenness)) %>%
slice(1:3) %>%
as_tibble()
# barplot(distance_table(g)$res / sum(distance_table(g)$res))
hist(degree(g), main = "Degree distribution", xlab = "Degree", ylab = "Frequency")
g_diam = g
V(g_diam)$color = "white"
E(g_diam)$color = "black"
diam = get_diameter(g_diam)
E(g_diam, path = diam)$color = "red"
V(g_diam)[diam]$color = "red"
par(mar = c(1, 1, 1, 1))
plot(g_diam, vertex.label = NA, vertex.size = 5, main = "Diameter of the network")
flights = induced_subgraph(g, V(g)[V(g)$group %in% c(0, 1, 2, 3)])
V(flights)$color <- colors[V(flights)$group]
for (e in E(flights)) {
ends = ends(flights, e)
from = V(flights)[ends[1]]$group
to = V(flights)[ends[2]]$group
if (from == to) {
E(flights)[e]$color = V(flights)[ends[1]]$color
E(flights)[e]$width = 3
} else {
E(flights)[e]$color = "black"
E(flights)[e]$width = 0.3
}
}
par(mar = c(1, 1, 3, 1))
plot(flights, vertex.label.color = "black", vertex.size = 5, vertex.label.cex = 0.75, main = "Hijackers subnetwork")
legend("topright", c("A.A. Flight 11", "A.A. Flight 77", "U.A. Flight 93", "U.A. Flight 175"), fill = colors)
edge = as_edgelist(g)
l = c(edge[,1], edge[,2])
r = c(edge[,2], edge[,1])
dl = d[l]
d = degree(g)
edge = as_edgelist(g)
l = c(edge[,1], edge[,2])
r = c(edge[,2], edge[,1])
dl = d[l]
dr = d[r]
cor(dl, dr)
d = V(g)$group
d = V(g)$group
edge = as_edgelist(g)
l = c(edge[,1], edge[,2])
r = c(edge[,2], edge[,1])
dl = d[l]
dr = d[r]
cor(dl, dr)
dl
d
d = as.factor(V(g)$group)
d
d = as.numeric(V(g)$group)
d
d = as.numeric(V(g)$group)
edge = as_edgelist(g)
l = c(edge[,1], edge[,2])
r = c(edge[,2], edge[,1])
dl = d[l]
dr = d[r]
cor(dl, dr)
l = c(edge[,1], edge[,2])
l
d[l]
length(d{l})
length(d[l])
d = V(g)$group == 1
edge = as_edgelist(g)
l = c(edge[,1], edge[,2])
r = c(edge[,2], edge[,1])
dl = d[l]
dr = d[r]
cor(dl, dr)
male = V(g)$group == 1
names(male) = V(g)$name
modularity(g, membership = male + 1)
male = V(g)$group == 0
names(male) = V(g)$name
modularity(g, membership = male + 1)
male = V(g)$group == 2
names(male) = V(g)$name
modularity(g, membership = male + 1)
male = V(g)$group == 3
names(male) = V(g)$name
modularity(g, membership = male + 1)
male = V(g)$group == 4
names(male) = V(g)$name
modularity(g, membership = male + 1)
male = V(g)$group == 6
names(male) = V(g)$name
modularity(g, membership = male + 1)
male = V(g)$group == 4
names(male) = V(g)$name
modularity(g, membership = male + 1)
transitivity(g)
reciprocity(g)
log(((mean(degree(g) ^ 2) - mean(degree(g))) / ((mean(degree(g) ^ 2) - (2 * degree(g))))))
log(((mean(degree(g) ^ 2) - mean(degree(g))) / ((mean(degree(g) ^ 2) - (2 * mean(degree(g)))))))
sir(g)
sir(g, beta = 5)
sir(g, beta = 5, gamma = 1)
plot(sir(g, beta = 5, gamma = 1))
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(tidygraph)
library(tidyverse)
library(ggplot2)
library(ggraph)
library(ggeasy)
nodes = as.data.frame(read.csv("data/nodes.csv"))
edges = as.data.frame(read.csv("data/edges.csv"))
layout = as.matrix(cbind(nodes$x, nodes$y))
g = graph_from_data_frame(edges, nodes, directed = F)
V(g)$group = as_factor(V(g)$group)
colors = c("orange", "lightgreen", "purple", "lightblue", "red")
ggraph(as_tbl_graph(g), layout = layout) +
geom_edge_link(aes(alpha = centrality_edge_betweenness()), show.legend = F) +
geom_node_point(aes(color = group, size = centrality_degree())) +
# geom_node_text(aes(label = str_trunc(name, 8, ellipsis = "..."))) +
ggtitle("9/11 Hijackers communication network") +
guides(size = "none", alpha = "none") +
scale_color_manual(values = colors, name = "Flight", labels = c("A.A. Flight 11", "A.A. Flight 77", "U.A. Flight 93", "U.A. Flight 175", "No flight")) +
theme_void()
deg = as_tbl_graph(g) %>%
activate(nodes) %>%
mutate(degree = centrality_degree()) %>%
arrange(desc(degree)) %>%
slice(1:10) %>%
select(name, degree) %>%
as_tibble()
deg
ggraph(as_tbl_graph(g), layout = layout) +
geom_edge_link(aes(alpha = centrality_edge_betweenness()), show.legend = F) +
geom_node_point(aes(color = group, size = centrality_degree())) +
geom_node_text(aes(label = ifelse(name %in% deg$name, name, ""))) +
ggtitle("Top 10 highest-ranked nodes") +
guides(size = "none", alpha = "none") +
scale_color_manual(values = colors, name = "Flight", labels = c("A.A. Flight 11", "A.A. Flight 77", "U.A. Flight 93", "U.A. Flight 175", "No flight")) +
theme_void()
as_tbl_graph(g) %>%
activate(nodes) %>%
mutate(degree = centrality_degree(), closeness = centrality_closeness(), betweenness = centrality_betweenness()) %>%
select(name, degree, closeness, betweenness) %>%
arrange(desc(degree), desc(closeness), desc(betweenness)) %>%
slice(1:3) %>%
as_tibble()
# barplot(distance_table(g)$res / sum(distance_table(g)$res))
hist(degree(g), main = "Degree distribution", xlab = "Degree", ylab = "Frequency")
g_diam = g
V(g_diam)$color = "white"
E(g_diam)$color = "black"
diam = get_diameter(g_diam)
E(g_diam, path = diam)$color = "red"
V(g_diam)[diam]$color = "red"
par(mar = c(1, 1, 1, 1))
plot(g_diam, vertex.label = NA, vertex.size = 5, main = "Diameter of the network")
flights = induced_subgraph(g, V(g)[V(g)$group %in% c(0, 1, 2, 3)])
V(flights)$color <- colors[V(flights)$group]
for (e in E(flights)) {
ends = ends(flights, e)
from = V(flights)[ends[1]]$group
to = V(flights)[ends[2]]$group
if (from == to) {
E(flights)[e]$color = V(flights)[ends[1]]$color
E(flights)[e]$width = 3
} else {
E(flights)[e]$color = "black"
E(flights)[e]$width = 0.3
}
}
par(mar = c(1, 1, 3, 1))
plot(flights, vertex.label.color = "black", vertex.size = 5, vertex.label.cex = 0.75, main = "Hijackers subnetwork")
legend("topright", c("A.A. Flight 11", "A.A. Flight 77", "U.A. Flight 93", "U.A. Flight 175"), fill = colors)
g0 = induced_subgraph(flights, V(flights)[V(flights)$group == 0])
g1 = induced_subgraph(flights, V(flights)[V(flights)$group == 1])
g2 = induced_subgraph(flights, V(flights)[V(flights)$group == 2])
g3 = induced_subgraph(flights, V(flights)[V(flights)$group == 3])
par(mfrow = c(2,2), mar = c(1,1,1,1))
plot(g0, vertex.label.color = "black", vertex.size = 10, main = "A.A. Flight 11")
plot(g1, vertex.label.color = "black", vertex.size = 10, main = "A.A. Flight 77")
plot(g2, vertex.label.color = "black", vertex.size = 10, main = "U.A. Flight 93")
plot(g3, vertex.label.color = "black", vertex.size = 10, main = "U.A. Flight 175")
efficency <- function(g){
if (vcount(g) <=  1) {
return(0)
}
efficency = 0
paths = distances(g, v = V(g), to = V(g))
for (path in paths) {
if (path !=  0 && !is.infinite(path)){
efficency = efficency + (1 / path)
}
}
return(efficency / (vcount(g) * (vcount(g) - 1)))
}
efficency_remove <- function(g, method = "rand"){
g_copy = g
steps = data.frame()
steps = rbind(steps, list(index = 1, efficency = efficency(g_copy), type = method))
i = 2
while (vcount(g_copy) > 0) {
if (method == "rand") {
node = sample(V(g_copy), 1)
} else if (method == "deg") {
node = which.max(degree(g_copy) == max(degree(g_copy)))
} else if (method == "eig") {
node = which.max(eigen_centrality(g_copy)$vector == max(eigen_centrality(g_copy)$vector))
} else if (method == "betw") {
node = which.max(betweenness(g_copy) == max(betweenness(g_copy)))
}
g_copy = delete_vertices(g_copy, node)
steps = rbind(steps, list(index = i, efficency = efficency(g_copy),  type = method))
i = i + 1
}
return(steps)
}
as_tbl_graph(g) %>%
activate(nodes) %>%
mutate(degree = centrality_degree(), closeness = centrality_closeness(), betweenness = centrality_betweenness(), eigen = centrality_eigen()) %>%
select(name, degree, closeness, betweenness) %>%
arrange(desc(degree), desc(closeness), desc(betweenness), desc(eigen)) %>%
slice(1:3) %>%
as_tibble()
as_tbl_graph(g) %>%
activate(nodes) %>%
mutate(degree = centrality_degree(), closeness = centrality_closeness(), betweenness = centrality_betweenness(), eigen = centrality_eigen()) %>%
select(name, degree, closeness, betweenness, eigen) %>%
arrange(desc(degree), desc(closeness), desc(betweenness), desc(eigen)) %>%
slice(1:3) %>%
as_tibble()
as_tbl_graph(g) %>%
activate(nodes) %>%
mutate(degree = centrality_degree(), closeness = centrality_closeness(), betweenness = centrality_betweenness(), eigen = centrality_eigen()) %>%
select(name, degree, closeness, betweenness, eigen) %>%
arrange(desc(eigen)) %>%
slice(1:3) %>%
as_tibble()
as_tbl_graph(g) %>%
activate(nodes) %>%
mutate(degree = centrality_degree(), closeness = centrality_closeness(), betweenness = centrality_betweenness(), eigen = centrality_eigen()) %>%
select(name, degree, closeness, betweenness, eigen) %>%
arrange(desc(degree), desc(closeness), desc(betweenness), desc(eigen)) %>%
slice(1:4) %>%
as_tibble()
as_tbl_graph(g) %>%
activate(nodes) %>%
mutate(degree = centrality_degree(), closeness = centrality_closeness(), betweenness = centrality_betweenness(), eigen = centrality_eigen()) %>%
select(name, degree, closeness, betweenness, eigen) %>%
arrange(desc(degree), desc(closeness), desc(betweenness), desc(eigen)) %>%
slice(1:5) %>%
as_tibble()
as_tbl_graph(g) %>%
activate(nodes) %>%
mutate(degree = centrality_degree(), closeness = centrality_closeness(), betweenness = centrality_betweenness(), eigen = centrality_eigen()) %>%
select(name, degree, closeness, betweenness, eigen) %>%
arrange(desc(degree), desc(closeness), desc(betweenness), desc(eigen)) %>%
slice(1:3) %>%
as_tibble()
degree(g)["Ziad Jarrah"]
degree(g)["Ziad Jarrah"][0]
degree(g)["Ziad Jarrah"][1]
mean(degree(g))
degree(g)["Ahmed Al Haznawi"]
degree(g)["Ahmed Al Nami"]
degree(g)["Ahmed AlNami"]
degree(g)["Ahmed Alnami"]
degree(g)["Saeed Al Ghamdi"]
degree(g)["Saeed Alghamdi"]
hist(distance_table(g))
distance_table(g)
hist(distance_table(g)$res)
hist(distance_table(g)$res / vcount(g))
hist(distance_table(g)$res / sum(1:length(distance_table(g)$res))
hist(distance_table(g)$res / sum(distance_table(g))
hist(distance_table(g)$res / sum(distance_table(g))$res)
hist(distance_table(g)$res / sum(distance_table(g)$res))
paths = distance_table(g)$res
names(paths) = 1:length(paths)
barplot(paths / sum(paths), xlab="Distance", ylab="Frequency")
mean(distance_table(g)$res)
mean_distance(g)
hist(paths / sum(paths), xlab="Distance", ylab="Frequency", main = "Distance distribution")
paths = distance_table(g)$res
names(paths) = 1:length(paths)
hist(paths / sum(paths), xlab="Distance", ylab="Frequency", main = "Distance distribution")
barplot(paths / sum(paths), xlab="Distance", ylab="Frequency", main = "Distance distribution")
efficency(g)
global_efficiency(g)
plot(flights, vertex.label.color = "black", vertex.size = 5,  main = "Hijackers subnetwork")
vertex.label.cex = 0.75,
plot(flights, vertex.label.color = "black", vertex.size = 5, vertex.label.cex = 0.75, main = "Hijackers subnetwork")
flights = induced_subgraph(g, V(g)[V(g)$group %in% c(0, 1, 2, 3)])
V(flights)$color <- colors[V(flights)$group]
for (e in E(flights)) {
ends = ends(flights, e)
from = V(flights)[ends[1]]$group
to = V(flights)[ends[2]]$group
if (from == to) {
E(flights)[e]$color = V(flights)[ends[1]]$color
E(flights)[e]$width = 3
} else {
E(flights)[e]$color = "black"
E(flights)[e]$width = 0.3
}
}
par(mar = c(1, 1, 3, 1))
plot(flights, vertex.label.color = "black", vertex.size = 5, vertex.label.cex = 0.75, main = "Hijackers subnetwork")
legend("topright", c("A.A. Flight 11", "A.A. Flight 77", "U.A. Flight 93", "U.A. Flight 175"), fill = colors)
flights = induced_subgraph(g, V(g)[V(g)$group %in% c(0, 1, 2, 3)])
V(flights)$color <- colors[V(flights)$group]
for (e in E(flights)) {
ends = ends(flights, e)
from = V(flights)[ends[1]]$group
to = V(flights)[ends[2]]$group
if (from == to) {
E(flights)[e]$color = V(flights)[ends[1]]$color
E(flights)[e]$width = 3
} else {
E(flights)[e]$color = "black"
E(flights)[e]$width = 0.3
}
}
par(mar = c(1, 1, 3, 1))
plot(flights, vertex.label.color = "black", vertex.size = 5,, main = "Hijackers subnetwork")
legend("topright", c("A.A. Flight 11", "A.A. Flight 77", "U.A. Flight 93", "U.A. Flight 175"), fill = colors)
flights = induced_subgraph(g, V(g)[V(g)$group %in% c(0, 1, 2, 3)])
V(flights)$color <- colors[V(flights)$group]
for (e in E(flights)) {
ends = ends(flights, e)
from = V(flights)[ends[1]]$group
to = V(flights)[ends[2]]$group
if (from == to) {
E(flights)[e]$color = V(flights)[ends[1]]$color
E(flights)[e]$width = 3
} else {
E(flights)[e]$color = "black"
E(flights)[e]$width = 0.3
}
}
par(mar = c(1, 1, 3, 1))
plot(flights, vertex.label.color = "black", vertex.size = 5, vertex.label.cex = 0.9, main = "Hijackers subnetwork")
legend("topright", c("A.A. Flight 11", "A.A. Flight 77", "U.A. Flight 93", "U.A. Flight 175"), fill = colors)
flights = induced_subgraph(g, V(g)[V(g)$group %in% c(0, 1, 2, 3)])
V(flights)$color <- colors[V(flights)$group]
for (e in E(flights)) {
ends = ends(flights, e)
from = V(flights)[ends[1]]$group
to = V(flights)[ends[2]]$group
if (from == to) {
E(flights)[e]$color = V(flights)[ends[1]]$color
E(flights)[e]$width = 3
} else {
E(flights)[e]$color = "black"
E(flights)[e]$width = 0.3
}
}
par(mar = c(1, 1, 3, 1))
plot(flights, vertex.label.color = "black", vertex.size = 5, vertex.label.cex = 0.75, main = "Hijackers subnetwork")
legend("topright", c("A.A. Flight 11", "A.A. Flight 77", "U.A. Flight 93", "U.A. Flight 175"), fill = colors)
efficency <- function(g){
if (vcount(g) <=  1) {
return(0)
}
efficency = 0
paths = distances(g, v = V(g), to = V(g))
for (path in paths) {
print(path)
if (path !=  0 && !is.infinite(path)){
efficency = efficency + (1 / path)
}
}
return(efficency / (vcount(g) * (vcount(g) - 1)))
}
efficency_remove <- function(g, method = "rand"){
g_copy = g
steps = data.frame()
steps = rbind(steps, list(index = 1, efficency = efficency(g_copy), type = method))
i = 2
while (vcount(g_copy) > 0) {
if (method == "rand") {
node = sample(V(g_copy), 1)
} else if (method == "deg") {
node = which.max(degree(g_copy) == max(degree(g_copy)))
} else if (method == "eig") {
node = which.max(eigen_centrality(g_copy)$vector == max(eigen_centrality(g_copy)$vector))
} else if (method == "betw") {
node = which.max(betweenness(g_copy) == max(betweenness(g_copy)))
}
g_copy = delete_vertices(g_copy, node)
steps = rbind(steps, list(index = i, efficency = efficency(g_copy),  type = method))
i = i + 1
}
return(steps)
}
efficency(g)
eff_deg = efficency_remove(g, "deg")
eff_eig = efficency_remove(g, "eig")
eff_betw = efficency_remove(g, "betw")
eff_rand = efficency_remove(g)
ggplot(rbind(eff_deg, eff_eig, eff_betw, eff_rand), aes(x = index, y = efficency, color = type)) +
geom_line() +
labs(title = 'Graph Efficiency After Node Removal',
x = 'Step',
y = 'Efficiency',
color = 'Removal Type') +
theme_minimal()
efficency <- function(g){
n_v = vcount(g)
if (n_v <=  1) {
return(0)
}
efficency = 0
paths = distances(g, v = V(g), to = V(g))
for (path in paths) {
if (path !=  0 && !is.infinite(path)){
efficency = efficency + (1 / path)
}
}
return(efficency / (n_v * (n_v - 1)))
}
efficency_remove <- function(g, method = "rand"){
g_copy = g
steps = data.frame()
steps = rbind(steps, list(index = 1, efficency = efficency(g_copy), type = method))
i = 2
while (vcount(g_copy) > 0) {
if (method == "rand") {
node = sample(V(g_copy), 1)
} else if (method == "deg") {
node = which.max(degree(g_copy) == max(degree(g_copy)))
} else if (method == "eig") {
node = which.max(eigen_centrality(g_copy)$vector == max(eigen_centrality(g_copy)$vector))
} else if (method == "betw") {
node = which.max(betweenness(g_copy) == max(betweenness(g_copy)))
}
g_copy = delete_vertices(g_copy, node)
steps = rbind(steps, list(index = i, efficency = efficency(g_copy),  type = method))
i = i + 1
}
return(steps)
}
eff_deg = efficency_remove(g, "deg")
eff_eig = efficency_remove(g, "eig")
eff_betw = efficency_remove(g, "betw")
eff_rand = efficency_remove(g)
ggplot(rbind(eff_deg, eff_eig, eff_betw, eff_rand), aes(x = index, y = efficency, color = type)) +
geom_line() +
labs(title = 'Graph Efficiency After Node Removal',
x = 'Step',
y = 'Efficiency',
color = 'Removal Type') +
theme_minimal()
