"0","efficency <- function(g){"
"0","  n_v = vcount(g)"
"0","  if (n_v <=  1) {"
"0","    return(0)"
"0","  }"
"0","  efficency = 0"
"0","  paths = distances(g, v = V(g), to = V(g))"
"0","  for (path in paths) {"
"0","    if (path !=  0 && !is.infinite(path)){"
"0","      efficency = efficency + (1 / path)"
"0","    }"
"0","  }"
"0","  return(efficency / (n_v * (n_v - 1)))"
"0","}"
"0",""
"0","efficency_remove <- function(g, method = ""rand""){"
"0","  g_copy = g"
"0","  steps = data.frame()"
"0","  steps = rbind(steps, list(index = 1, efficency = efficency(g_copy), type = method))"
"0","  i = 2"
"0","  while (vcount(g_copy) > 0) {"
"0","    if (method == ""rand"") {"
"0","       node = sample(V(g_copy), 1)"
"0","    } else if (method == ""deg"") {"
"0","      node = which.max(degree(g_copy) == max(degree(g_copy)))"
"0","    } else if (method == ""eig"") {"
"0","      node = which.max(eigen_centrality(g_copy)$vector == max(eigen_centrality(g_copy)$vector))"
"0","    } else if (method == ""betw"") {"
"0","      node = which.max(betweenness(g_copy) == max(betweenness(g_copy)))"
"0","    }"
"0","    g_copy = delete_vertices(g_copy, node)"
"0","    steps = rbind(steps, list(index = i, efficency = efficency(g_copy),  type = method))"
"0","    i = i + 1"
"0","  }"
"0","  return(steps)"
"0","}"
